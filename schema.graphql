# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph = Article | ArticleAggregator | ArticleConnection | ArticleConnectionAuthor | ArticleConnectionCategory | ArticleConnectionContent | ArticleConnectionCreatedAt | ArticleConnectionDescription | ArticleConnectionId | ArticleConnectionImage | ArticleConnectionPublishedAt | ArticleConnectionSlug | ArticleConnectionStatus | ArticleConnectionTitle | ArticleConnectionUpdatedAt | ArticleConnection_id | ArticleGroupBy | Category | CategoryAggregator | CategoryConnection | CategoryConnectionCreatedAt | CategoryConnectionId | CategoryConnectionName | CategoryConnectionSlug | CategoryConnectionUpdatedAt | CategoryConnection_id | CategoryGroupBy | ComponentSectionsHero | ComponentSharedSeo | Global | Homepage | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | Writer | WriterAggregator | WriterConnection | WriterConnectionCreatedAt | WriterConnectionEmail | WriterConnectionId | WriterConnectionName | WriterConnectionPicture | WriterConnectionUpdatedAt | WriterConnection_id | WriterGroupBy | createArticlePayload | createCategoryPayload | createRolePayload | createUserPayload | createWriterPayload | deleteArticlePayload | deleteCategoryPayload | deleteFilePayload | deleteGlobalPayload | deleteHomepagePayload | deleteRolePayload | deleteUserPayload | deleteWriterPayload | updateArticlePayload | updateCategoryPayload | updateGlobalPayload | updateHomepagePayload | updateRolePayload | updateUserPayload | updateWriterPayload

type AdminUser {
  firstname: String!
  id: ID!
  lastname: String!
  username: String
}

type Article {
  _id: ID!
  author: Writer
  category: Category
  content: String!
  createdAt: DateTime!
  description: String!
  id: ID!
  image: UploadFile
  publishedAt: DateTime!
  slug: String!
  status: ENUM_ARTICLE_STATUS!
  title: String!
  updatedAt: DateTime!
}

type ArticleAggregator {
  count: Int
  totalCount: Int
}

type ArticleConnection {
  aggregate: ArticleAggregator
  groupBy: ArticleGroupBy
  values: [Article]
}

type ArticleConnectionAuthor {
  connection: ArticleConnection
  key: ID
}

type ArticleConnectionCategory {
  connection: ArticleConnection
  key: ID
}

type ArticleConnectionContent {
  connection: ArticleConnection
  key: String
}

type ArticleConnectionCreatedAt {
  connection: ArticleConnection
  key: DateTime
}

type ArticleConnectionDescription {
  connection: ArticleConnection
  key: String
}

type ArticleConnectionId {
  connection: ArticleConnection
  key: ID
}

type ArticleConnectionImage {
  connection: ArticleConnection
  key: ID
}

type ArticleConnectionPublishedAt {
  connection: ArticleConnection
  key: DateTime
}

type ArticleConnectionSlug {
  connection: ArticleConnection
  key: String
}

type ArticleConnectionStatus {
  connection: ArticleConnection
  key: String
}

type ArticleConnectionTitle {
  connection: ArticleConnection
  key: String
}

type ArticleConnectionUpdatedAt {
  connection: ArticleConnection
  key: DateTime
}

type ArticleConnection_id {
  connection: ArticleConnection
  key: ID
}

type ArticleGroupBy {
  _id: [ArticleConnection_id]
  author: [ArticleConnectionAuthor]
  category: [ArticleConnectionCategory]
  content: [ArticleConnectionContent]
  createdAt: [ArticleConnectionCreatedAt]
  description: [ArticleConnectionDescription]
  id: [ArticleConnectionId]
  image: [ArticleConnectionImage]
  publishedAt: [ArticleConnectionPublishedAt]
  slug: [ArticleConnectionSlug]
  status: [ArticleConnectionStatus]
  title: [ArticleConnectionTitle]
  updatedAt: [ArticleConnectionUpdatedAt]
}

type Category {
  _id: ID!
  articles(limit: Int, sort: String, start: Int, where: JSON): [Article]
  createdAt: DateTime!
  id: ID!
  name: String!
  slug: String!
  updatedAt: DateTime!
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryConnection {
  aggregate: CategoryAggregator
  groupBy: CategoryGroupBy
  values: [Category]
}

type CategoryConnectionCreatedAt {
  connection: CategoryConnection
  key: DateTime
}

type CategoryConnectionId {
  connection: CategoryConnection
  key: ID
}

type CategoryConnectionName {
  connection: CategoryConnection
  key: String
}

type CategoryConnectionSlug {
  connection: CategoryConnection
  key: String
}

type CategoryConnectionUpdatedAt {
  connection: CategoryConnection
  key: DateTime
}

type CategoryConnection_id {
  connection: CategoryConnection
  key: ID
}

type CategoryGroupBy {
  _id: [CategoryConnection_id]
  createdAt: [CategoryConnectionCreatedAt]
  id: [CategoryConnectionId]
  name: [CategoryConnectionName]
  slug: [CategoryConnectionSlug]
  updatedAt: [CategoryConnectionUpdatedAt]
}

type ComponentSectionsHero {
  _id: ID!
  id: ID!
  title: String!
}

type ComponentSharedSeo {
  _id: ID!
  id: ID!
  metaDescription: String!
  metaTitle: String!
  shareImage: UploadFile
}

type Global {
  _id: ID!
  createdAt: DateTime!
  defaultSeo: ComponentSharedSeo
  favicon: UploadFile
  id: ID!
  siteName: String!
  updatedAt: DateTime!
}

type Homepage {
  _id: ID!
  createdAt: DateTime!
  hero: ComponentSectionsHero
  id: ID!
  seo: ComponentSharedSeo
  updatedAt: DateTime!
}

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  createCategory(input: createCategoryInput): createCategoryPayload
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  createWriter(input: createWriterInput): createWriterPayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  "Delete one file"
  deleteFile(input: deleteFileInput): deleteFilePayload
  deleteGlobal: deleteGlobalPayload
  deleteHomepage: deleteHomepagePayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  deleteWriter(input: deleteWriterInput): deleteWriterPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  updateGlobal(input: updateGlobalInput): updateGlobalPayload
  updateHomepage(input: updateHomepageInput): updateHomepagePayload
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  updateWriter(input: updateWriterInput): updateWriterPayload
  upload(field: String, file: Upload!, ref: String, refId: ID, source: String): UploadFile!
}

type Query {
  article(id: ID!, publicationState: PublicationState): Article
  articles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Article]
  articlesConnection(limit: Int, sort: String, start: Int, where: JSON): ArticleConnection
  categories(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Category]
  categoriesConnection(limit: Int, sort: String, start: Int, where: JSON): CategoryConnection
  category(id: ID!, publicationState: PublicationState): Category
  files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  global(publicationState: PublicationState): Global
  homepage(publicationState: PublicationState): Homepage
  me: UsersPermissionsMe
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
  writer(id: ID!, publicationState: PublicationState): Writer
  writers(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Writer]
  writersConnection(limit: Int, sort: String, start: Int, where: JSON): WriterConnection
}

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updatedAt: DateTime!
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnection_id {
  connection: UploadFileConnection
  key: ID
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  createdAt: [UploadFileConnectionCreatedAt]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updatedAt: [UploadFileConnectionUpdatedAt]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

type UsersPermissionsRole {
  _id: ID!
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnection_id {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime!
  email: String!
  id: ID!
  provider: String
  role: UsersPermissionsRole
  updatedAt: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProvider {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnection_id {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  blocked: [UsersPermissionsUserConnectionBlocked]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  email: [UsersPermissionsUserConnectionEmail]
  id: [UsersPermissionsUserConnectionId]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
}

type Writer {
  _id: ID!
  articles(limit: Int, sort: String, start: Int, where: JSON): [Article]
  createdAt: DateTime!
  email: String
  id: ID!
  name: String
  picture: UploadFile
  updatedAt: DateTime!
}

type WriterAggregator {
  count: Int
  totalCount: Int
}

type WriterConnection {
  aggregate: WriterAggregator
  groupBy: WriterGroupBy
  values: [Writer]
}

type WriterConnectionCreatedAt {
  connection: WriterConnection
  key: DateTime
}

type WriterConnectionEmail {
  connection: WriterConnection
  key: String
}

type WriterConnectionId {
  connection: WriterConnection
  key: ID
}

type WriterConnectionName {
  connection: WriterConnection
  key: String
}

type WriterConnectionPicture {
  connection: WriterConnection
  key: ID
}

type WriterConnectionUpdatedAt {
  connection: WriterConnection
  key: DateTime
}

type WriterConnection_id {
  connection: WriterConnection
  key: ID
}

type WriterGroupBy {
  _id: [WriterConnection_id]
  createdAt: [WriterConnectionCreatedAt]
  email: [WriterConnectionEmail]
  id: [WriterConnectionId]
  name: [WriterConnectionName]
  picture: [WriterConnectionPicture]
  updatedAt: [WriterConnectionUpdatedAt]
}

type createArticlePayload {
  article: Article
}

type createCategoryPayload {
  category: Category
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createUserPayload {
  user: UsersPermissionsUser
}

type createWriterPayload {
  writer: Writer
}

type deleteArticlePayload {
  article: Article
}

type deleteCategoryPayload {
  category: Category
}

type deleteFilePayload {
  file: UploadFile
}

type deleteGlobalPayload {
  global: Global
}

type deleteHomepagePayload {
  homepage: Homepage
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type deleteWriterPayload {
  writer: Writer
}

type updateArticlePayload {
  article: Article
}

type updateCategoryPayload {
  category: Category
}

type updateGlobalPayload {
  global: Global
}

type updateHomepagePayload {
  homepage: Homepage
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateUserPayload {
  user: UsersPermissionsUser
}

type updateWriterPayload {
  writer: Writer
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum ENUM_ARTICLE_STATUS {
  draft
  published
}

enum PublicationState {
  LIVE
  PREVIEW
}

input ArticleInput {
  author: ID
  category: ID
  content: String!
  created_by: ID
  description: String!
  image: ID
  publishedAt: DateTime!
  slug: String!
  status: ENUM_ARTICLE_STATUS
  title: String!
  updated_by: ID
}

input CategoryInput {
  articles: [ID]
  created_by: ID
  name: String!
  slug: String!
  updated_by: ID
}

input ComponentSectionsHeroInput {
  title: String!
}

input ComponentSharedSeoInput {
  metaDescription: String!
  metaTitle: String!
  shareImage: ID
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  updated_by: ID
  url: String!
  width: Int
}

input GlobalInput {
  created_by: ID
  defaultSeo: ComponentSharedSeoInput!
  favicon: ID
  siteName: String!
  updated_by: ID
}

input HomepageInput {
  created_by: ID
  hero: ComponentSectionsHeroInput!
  seo: ComponentSharedSeoInput
  updated_by: ID
}

input InputID {
  id: ID!
}

input RoleInput {
  created_by: ID
  description: String
  name: String!
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input UserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String!
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input WriterInput {
  articles: [ID]
  created_by: ID
  email: String
  name: String
  picture: ID
  updated_by: ID
}

input createArticleInput {
  data: ArticleInput
}

input createCategoryInput {
  data: CategoryInput
}

input createRoleInput {
  data: RoleInput
}

input createUserInput {
  data: UserInput
}

input createWriterInput {
  data: WriterInput
}

input deleteArticleInput {
  where: InputID
}

input deleteCategoryInput {
  where: InputID
}

input deleteFileInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input deleteWriterInput {
  where: InputID
}

input editArticleInput {
  author: ID
  category: ID
  content: String
  created_by: ID
  description: String
  image: ID
  publishedAt: DateTime
  slug: String
  status: ENUM_ARTICLE_STATUS
  title: String
  updated_by: ID
}

input editCategoryInput {
  articles: [ID]
  created_by: ID
  name: String
  slug: String
  updated_by: ID
}

input editComponentSectionsHeroInput {
  id: ID
  title: String
}

input editComponentSharedSeoInput {
  id: ID
  metaDescription: String
  metaTitle: String
  shareImage: ID
}

input editFileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  updated_by: ID
  url: String
  width: Int
}

input editGlobalInput {
  created_by: ID
  defaultSeo: editComponentSharedSeoInput
  favicon: ID
  siteName: String
  updated_by: ID
}

input editHomepageInput {
  created_by: ID
  hero: editComponentSectionsHeroInput
  seo: editComponentSharedSeoInput
  updated_by: ID
}

input editRoleInput {
  created_by: ID
  description: String
  name: String
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input editUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String
}

input editWriterInput {
  articles: [ID]
  created_by: ID
  email: String
  name: String
  picture: ID
  updated_by: ID
}

input updateArticleInput {
  data: editArticleInput
  where: InputID
}

input updateCategoryInput {
  data: editCategoryInput
  where: InputID
}

input updateGlobalInput {
  data: editGlobalInput
}

input updateHomepageInput {
  data: editHomepageInput
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}

input updateWriterInput {
  data: editWriterInput
  where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
